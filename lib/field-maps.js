const moment = require('moment');

// takes an object like { prefix: {value: true} } and returns { prefix_value: true }
const prefixKeys = obj => {
  const result = {};
  Object.keys(obj).forEach(prefix => {
    const values = obj[prefix];

    Object.keys(values).forEach(key => {
      // ignore the getGateway function on each of these...
      if (key === 'getGateway') { return }
      result[`${prefix}_${key}`] = values[key];
    });
  });

  return result;
}

exports.transactions = ({
  customer,
  billing,
  shipping,
  creditCard,
  subscription,
  disbursementDetails,
  statusHistory,
  createdAt,
  updatedAt,
  refundIds,
  partialSettlementTransactionIds,
  addOns,
  discounts,
  descriptor,
  disputes,
  authorizationAdjustments,
  paypalAccount,
  coinbaseAccount,
  applePayCard,
  androidPayCard,
  visaCheckoutCard,
  masterpassCard,
  riskData,
  getGateway,
  id,
  status,
  type,
  currencyIsoCode,
  amount,
  merchantAccountId,
  subMerchantAccountId,
  masterMerchantAccountId,
  orderId,
  refundId,
  refundedTransactionId,
  authorizedTransactionId,
  settlementBatchId,
  customFields,
  avsErrorResponseCode,
  avsPostalCodeResponseCode,
  avsStreetAddressResponseCode,
  cvvResponseCode,
  gatewayRejectionReason,
  processorAuthorizationCode,
  processorResponseCode,
  processorResponseText,
  additionalProcessorResponse,
  voiceReferralNumber,
  purchaseOrderNumber,
  taxAmount,
  taxExempt,
  planId,
  subscriptionId,
  recurring,
  channel,
  serviceFeeAmount,
  escrowStatus,
  paymentInstrumentType,
  processorSettlementResponseCode,
  processorSettlementResponseText,
  threeDSecureInfo,
  shipsFromPostalCode,
  shippingAmount,
  discountAmount,
  ...otherFields
}) => {
  prefixed = prefixKeys({
      customer, billing, shipping, creditCard, subscription,
      disbursementDetails, descriptor
  });
  return ({
    id,
    status,
    type,
    currencyIsoCode,
    amount,
    merchantAccountId,
    subMerchantAccountId,
    masterMerchantAccountId,
    orderId,
    refundId,
    refundedTransactionId,
    authorizedTransactionId,
    settlementBatchId,
    customFields,
    avsErrorResponseCode,
    avsPostalCodeResponseCode,
    avsStreetAddressResponseCode,
    cvvResponseCode,
    gatewayRejectionReason,
    processorAuthorizationCode,
    processorResponseCode,
    processorResponseText,
    additionalProcessorResponse,
    voiceReferralNumber,
    purchaseOrderNumber,
    taxAmount,
    taxExempt,
    planId,
    subscriptionId,
    recurring,
    channel,
    serviceFeeAmount,
    escrowStatus,
    paymentInstrumentType,
    processorSettlementResponseCode,
    processorSettlementResponseText,
    threeDSecureInfo,
    shipsFromPostalCode,
    shippingAmount,
    discountAmount,
    customer_id: prefixed.customer_id,
    customer_first_name: prefixed.customer_first_name,
    customer_lastName: prefixed.customer_lastName,
    customer_company: prefixed.customer_company,
    customer_email: prefixed.customer_email,
    customer_website: prefixed.customer_website,
    customer_phone: prefixed.customer_phone,
    customer_fax: prefixed.customer_fax,
    billing_id: prefixed.billing_id,
    billing_firstName: prefixed.billing_firstName,
    billing_lastName: prefixed.billing_lastName,
    billing_company: prefixed.billing_company,
    billing_streetAddress: prefixed.billing_streetAddress,
    billing_extendedAddress: prefixed.billing_extendedAddress,
    billing_locality: prefixed.billing_locality,
    billing_region: prefixed.billing_region,
    billing_postalCode: prefixed.billing_postalCode,
    billing_countryName: prefixed.billing_countryName,
    billing_countryCodeAlpha2: prefixed.billing_countryCodeAlpha2,
    billing_countryCodeAlpha3: prefixed.billing_countryCodeAlpha3,
    billing_countryCodeNumeric: prefixed.billing_countryCodeNumeric,
    shipping_id: prefixed.shipping_id,
    shipping_firstName: prefixed.shipping_firstName,
    shipping_lastName: prefixed.shipping_lastName,
    shipping_company: prefixed.shipping_company,
    shipping_streetAddress: prefixed.shipping_streetAddress,
    shipping_extendedAddress: prefixed.shipping_extendedAddress,
    shipping_locality: prefixed.shipping_locality,
    shipping_region: prefixed.shipping_region,
    shipping_postalCode: prefixed.shipping_postalCode,
    shipping_countryName: prefixed.shipping_countryName,
    shipping_countryCodeAlpha2: prefixed.shipping_countryCodeAlpha2,
    shipping_countryCodeAlpha3: prefixed.shipping_countryCodeAlpha3,
    shipping_countryCodeNumeric: prefixed.shipping_countryCodeNumeric,
    creditCard_token: prefixed.creditCard_token,
    creditCard_bin: prefixed.creditCard_bin,
    creditCard_last4: prefixed.creditCard_last4,
    creditCard_cardType: prefixed.creditCard_cardType,
    creditCard_expirationMonth: prefixed.creditCard_expirationMonth,
    creditCard_expirationYear: prefixed.creditCard_expirationYear,
    creditCard_customerLocation: prefixed.creditCard_customerLocation,
    creditCard_cardholderName: prefixed.creditCard_cardholderName,
    creditCard_imageUrl: prefixed.creditCard_imageUrl,
    creditCard_prepaid: prefixed.creditCard_prepaid,
    creditCard_healthcare: prefixed.creditCard_healthcare,
    creditCard_debit: prefixed.creditCard_debit,
    creditCard_durbinRegulated: prefixed.creditCard_durbinRegulated,
    creditCard_commercial: prefixed.creditCard_commercial,
    creditCard_payroll: prefixed.creditCard_payroll,
    creditCard_issuingBank: prefixed.creditCard_issuingBank,
    creditCard_countryOfIssuance: prefixed.creditCard_countryOfIssuance,
    creditCard_productId: prefixed.creditCard_productId,
    creditCard_uniqueNumberIdentifier: prefixed.creditCard_uniqueNumberIdentifier,
    creditCard_venmoSdk: prefixed.creditCard_venmoSdk,
    creditCard_maskedNumber: prefixed.creditCard_maskedNumber,
    creditCard_expirationDate: prefixed.creditCard_expirationDate,
    subscription_billingPeriodEndDate: prefixed.subscription_billingPeriodEndDate,
    subscription_billingPeriodStartDate: prefixed.subscription_billingPeriodStartDate,
    disbursementDetails_disbursementDate: prefixed.disbursementDetails_disbursementDate,
    disbursementDetails_settlementAmount: prefixed.disbursementDetails_settlementAmount,
    disbursementDetails_settlementCurrencyIsoCode: prefixed.disbursementDetails_settlementCurrencyIsoCode,
    disbursementDetails_settlementCurrencyExchangeRate: prefixed.disbursementDetails_settlementCurrencyExchangeRate,
    disbursementDetails_fundsHeld: prefixed.disbursementDetails_fundsHeld,
    disbursementDetails_success: prefixed.disbursementDetails_success,
    descriptor_name: prefixed.descriptor_name,
    descriptor_phone: prefixed.descriptor_phone,
    descriptor_url: prefixed.descriptor_url,
    createdAt: moment(createdAt).format('YYYY-MM-DD HH:mm:ss'),
    updatedAt: moment(updatedAt).format('YYYY-MM-DD HH:mm:ss'),
  });
};

exports.subscriptions = ({
  id,
  balance,
  createdAt,
  updatedAt,
  billingPeriodEndDate,
  billingPeriodStartDate,
  billingDayOfMonth,
  currentBillingCycle,
  daysPastDue,
  failureCount,
  description,
  firstBillingDate,
  merchantAccountId,
  neverExpires,
  nextBillAmount,
  nextBillingDate,
  nextBillingPeriodAmount,
  numberOfBillingCycles,
  paidThroughDate,
  paymentMethodToken,
  planId,
  price,
  status,
  trialDuration,
  trialDurationUnit,
  trialPeriod,
}) => ({
  id,
  balance,
  createdAt: moment(createdAt).format('YYYY-MM-DD HH:mm:ss'),
  updatedAt: moment(updatedAt).format('YYYY-MM-DD HH:mm:ss'),
  billingPeriodStartDate: moment(billingPeriodStartDate).format('YYYY-MM-DD HH:mm:ss'),
  billingPeriodEndDate: moment(billingPeriodEndDate).format('YYYY-MM-DD HH:mm:ss'),
  billingDayOfMonth,
  currentBillingCycle,
  daysPastDue,
  failureCount,
  description,
  firstBillingDate: moment(firstBillingDate).format('YYYY-MM-DD HH:mm:ss'),
  merchantAccountId,
  neverExpires,
  nextBillAmount,
  nextBillingDate: moment(nextBillingDate).format('YYYY-MM-DD HH:mm:ss'),
  nextBillingPeriodAmount,
  numberOfBillingCycles,
  paidThroughDate,
  paymentMethodToken,
  planId,
  price,
  status,
  trialDuration,
  trialDurationUnit,
  trialPeriod,
});

exports.disputes = ({
  id,
  amountDisputed,
  amountWon,
  caseNumber,
  createdAt,
  updatedAt,
  currencyIsoCode,
  kind,
  merchantAccountId,
  originalDisputeId,
  processorComments,
  reason,
  reasonCode,
  reasonDescription,
  receivedDate,
  referenceNumber,
  replyByDate,
  status,
  transaction,
}) => ({
  id,
  amountDisputed,
  amountWon,
  caseNumber,
  createdAt: moment(createdAt).format('YYYY-MM-DD HH:mm:ss'),
  updatedAt: moment(updatedAt).format('YYYY-MM-DD HH:mm:ss'),
  currencyIsoCode,
  kind,
  merchantAccountId,
  originalDisputeId,
  processorComments,
  reason,
  reasonCode,
  reasonDescription,
  receivedDate: moment(receivedDate).format('YYYY-MM-DD HH:mm:ss'),
  referenceNumber,
  replyByDate: moment(replyByDate).format('YYYY-MM-DD HH:mm:ss'),
  status,
  transactionId: transaction.id,
});
